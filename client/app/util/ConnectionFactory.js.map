{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","closeConnection","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AACA,kBAAMA,SAAS,CAAC,aAAD,CAAf;AACA,gBAAIC,aAAa,IAAjB;AACA,gBAAIC,QAAQ,IAAZ;;gBAEaC,iB,GAAN,MAAMA,iBAAN,CAAwB;AAC3BC,8BAAc;AACV,0BAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;AAED,uBAAOC,aAAP,GAAuB;AACnB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,4BAAIR,UAAJ,EAAgB,OAAOO,QAAQP,UAAR,CAAP;AAChB,8BAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;AACAF,oCAAYG,eAAZ,GAA8BC,KAAI;AAC9BX,8CAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AAEH,yBAHD;AAIAP,oCAAYQ,SAAZ,GAAwBJ,KAAK;AACzBb,yCAAaa,EAAEE,MAAF,CAASC,MAAtB;AACAf,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,MAAK;AACpB,sCAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AAEH,6BAHD;AAIAG,oCAAQP,UAAR;AACH,yBARD;AASAS,oCAAYU,OAAZ,GAAsBN,KAAK;AACvBO,oCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAd,mCAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,yBAHD;AAKH,qBArBM,CAAP;AAsBH;;AAED,uBAAOC,eAAP,GAAyB;AACrB,wBAAIxB,UAAJ,EAAgB;AACZC;AACH;AACJ;;AAED,uBAAOa,aAAP,CAAqBd,UAArB,EAAiC;AAC7BD,2BAAO0B,OAAP,CAAeC,SAAS;AACpB,4BAAI1B,WAAW2B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACI1B,WAAW6B,iBAAX,CAA6BH,KAA7B;AACJ1B,mCAAW8B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,qBAJD;AAKH;AA1C0B,a","file":"ConnectionFactory.js","sourcesContent":["\r\nconst stores = ['negociacoes'];\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n    constructor() {\r\n        throw new Error(\"Não é possível criar instâncias dessa class\");\r\n    }\r\n\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n            if (connection) return resolve(connection);\r\n            const openRequest = indexedDB.open('jscangaceiro', 2);\r\n            openRequest.onupgradeneeded = e=> {\r\n                ConnectionFactory._createStores(e.target.result);\r\n\r\n            };\r\n            openRequest.onsuccess = e => {\r\n                connection = e.target.result;\r\n                close = connection.close.bind(connection);\r\n                connection.close = ()=> {\r\n                    throw new Error(\"Você não pode fechar diretamente a conexão\");\r\n                    \r\n                };\r\n                resolve(connection);\r\n            };\r\n            openRequest.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject(e.target.error.name);\r\n            };\r\n            \r\n        });\r\n    }\r\n\r\n    static closeConnection() {\r\n        if (connection) {\r\n            close();\r\n        }\r\n    }\r\n\r\n    static _createStores(connection) {\r\n        stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n        });\r\n    }\r\n}\r\n\r\n"]}